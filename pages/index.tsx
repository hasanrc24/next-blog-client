import { GetServerSideProps } from "next";
import Head from "next/head";
import { fetchArticles, fetchCategories } from "../http";
import { AxiosResponse } from "axios";
import { Category, CollectionTypes, Article, Pagination } from "../types";
import Categories from "../components/Categories";
import Articles from "../components/Articles";
import qs from "qs";
import Paginate from "../components/Paginate";
import { useRouter } from "next/router";
import debounce from "lodash.debounce";
import { wrapper } from "../redux/store";
import { allArticles, articleSubscribe } from "../redux/articleSlice";
import { allCategories, categorySubscribe } from "../redux/categorySlice";
import { useSelector } from "react-redux";

interface propsType {
  categories: Category[];
  articles: {
    items: Article[];
    pagination: Pagination;
  };
}
export default function Home({ categories, articles }: propsType) {
  const router = useRouter();
  // const dispatch = useDispatch();
  const articlesFromStore = useSelector(articleSubscribe);
  const categoryFromStore = useSelector(categorySubscribe);

  const handleSearch = (e: any) => {
    router.push(`/?search=${e.target.value}`);
  };
  return (
    <div>
      <Head>
        <title>Next Blog | Home</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Categories
        categories={categoryFromStore.categories.data}
        handleSearch={debounce(handleSearch, 400)}
      />
      <Articles articles={articlesFromStore.articles.data} />
      <Paginate
        page={articles.pagination.page}
        pageCount={articles.pagination.pageCount}
      />
    </div>
  );
}

export const getServerSideProps: GetServerSideProps =
  wrapper.getServerSideProps((store) => async ({ query }) => {
    const options = {
      populate: ["author.avatar"],
      sort: ["id:desc"],
      pagination: {
        page: query.page ? query.page : 1,
        pageSize: 2,
      },
      filters: {
        title: {
          $containsi: query.search,
        },
      },
    };

    // if (query.search) {
    //   options.filters = {
    //     body: {
    //       $containsi: query.search,
    //     },
    //   };
    // }
    const queryString = qs.stringify(options);

    const { data: category }: AxiosResponse<CollectionTypes<Category[]>> =
      await fetchCategories();
    store.dispatch(allCategories(category));

    const { data: articles }: AxiosResponse<CollectionTypes<Article[]>> =
      await fetchArticles(queryString);
    store.dispatch(allArticles(articles));

    return {
      props: {
        categories: category.data,
        articles: {
          items: articles.data,
          pagination: articles.meta.pagination,
        },
      },
    };
  });
