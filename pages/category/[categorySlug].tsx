import { AxiosResponse } from "axios";
import { GetServerSideProps } from "next";
import Head from "next/head";
import qs from "qs";
import React from "react";
import Articles from "../../components/Articles";
import Categories from "../../components/Categories";
import Paginate from "../../components/Paginate";
import { fetArticles, fetchCategories } from "../../http";
import { Article, Category, CollectionTypes, Pagination } from "../../types";

interface propsType {
  categories: Category[];
  articles: {
    items: Article[];
    pagination: Pagination;
  };
  slug: string;
}

const category = ({ categories, articles, slug }: propsType) => {
  const formatTitle = (slug: string) => {
    let splitted = slug.split("-");
    if (Number.isNaN(parseFloat(splitted[1]))) {
      const tempTitle = splitted.join(" ");
      return tempTitle.charAt(0).toUpperCase() + tempTitle.slice(1);
    } else {
      return splitted[0].charAt(0).toUpperCase() + splitted[0].slice(1);
    }
  };
  return (
    <>
      <Head>
        <title>Next Blog | {formatTitle(slug)}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="">
        <Categories categories={categories} />
        <Articles articles={articles.items} />
        <Paginate
          page={articles.pagination.page}
          pageCount={articles.pagination.pageCount}
          redictUrl={`/category/${slug}`}
        />
      </div>
    </>
  );
};

export default category;

export const getServerSideProps: GetServerSideProps = async ({ query }) => {
  const options = {
    populate: ["author.avatar"],
    sort: ["id:desc"],
    filters: {
      category: {
        slug: query.categorySlug,
      },
    },
    pagination: {
      page: query.page ? query.page : 1,
      pageSize: 1,
    },
  };
  const queryString = qs.stringify(options);

  const { data: category }: AxiosResponse<CollectionTypes<Category[]>> =
    await fetchCategories();

  const { data: articles }: AxiosResponse<CollectionTypes<Article[]>> =
    await fetArticles(queryString);
  return {
    props: {
      categories: category.data,
      articles: {
        items: articles.data,
        pagination: articles.meta.pagination,
      },
      slug: query.categorySlug,
    },
  };
};
