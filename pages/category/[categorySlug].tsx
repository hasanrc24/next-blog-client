import { AxiosResponse } from "axios";
import debounce from "lodash.debounce";
import { GetServerSideProps } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import qs from "qs";
import React from "react";
import Articles from "../../components/Articles";
import Categories from "../../components/Categories";
import Paginate from "../../components/Paginate";
import { fetchArticles, fetchCategories } from "../../http";
import { Article, CollectionTypes, Pagination } from "../../types";
import { useSelector } from "react-redux";
import { categorySubscribe } from "../../redux/categorySlice";
import { wrapper } from "../../redux/store";

interface propsType {
  articles: {
    items: Article[];
    pagination: Pagination;
  };
  slug: string;
}

const Category = ({ articles, slug }: propsType) => {
  const router = useRouter();

  const categoryFromStore = useSelector(categorySubscribe);

  const formatTitle = (slug: any) => {
    let splitted = slug.split("-");
    if (Number.isNaN(parseFloat(splitted[1]))) {
      const tempTitle = splitted.join(" ");
      return tempTitle.charAt(0).toUpperCase() + tempTitle.slice(1);
    } else {
      return splitted[0].charAt(0).toUpperCase() + splitted[0].slice(1);
    }
  };

  const handleSearch = (e: any) => {
    router.push(`/category/${slug}/?search=${e.target.value}`);
  };
  return (
    <>
      <Head>
        <title>Next Blog | {formatTitle(slug)}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="">
        <Categories
          categories={categoryFromStore.categories.data}
          handleSearch={debounce(handleSearch, 400)}
        />
        <Articles articles={articles.items} />
        <Paginate
          page={articles.pagination.page}
          pageCount={articles.pagination.pageCount}
          redictUrl={`/category/${slug}`}
        />
      </div>
    </>
  );
};

export default Category;

export const getServerSideProps: GetServerSideProps =
  wrapper.getServerSideProps((store) => async ({ query }) => {
    const options = {
      populate: ["author.avatar"],
      sort: ["id:desc"],
      filters: {
        category: {
          slug: query.categorySlug,
        },
        title: {
          $containsi: query.search,
        },
      },
      pagination: {
        page: query.page ? query.page : 1,
        pageSize: 4,
      },
    };
    const queryString = qs.stringify(options);

    const { data: articles }: AxiosResponse<CollectionTypes<Article[]>> =
      await fetchArticles(queryString);
    return {
      props: {
        articles: {
          items: articles.data,
          pagination: articles.meta.pagination,
        },
        slug: query.categorySlug,
      },
    };
  });
